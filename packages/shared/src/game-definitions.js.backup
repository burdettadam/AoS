"use strict";
/**
 * Common definitions for game actions, selections, effects, and modifiers
 * This module reduces tight coupling by centralizing all game mechanic constants
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VALIDATION_RULES = exports.INFO_PATTERNS = exports.COMMON_EFFECTS = exports.TARGET_SELECTIONS = exports.ActionPhase = exports.CharacterTag = exports.SelectionModifier = exports.PlayerTeam = exports.EffectTarget = exports.EffectDuration = exports.StatusEffect = exports.MetaActionType = exports.CharacterActionType = void 0;
exports.isCharacterAction = isCharacterAction;
exports.isMetaAction = isMetaAction;
exports.getAllActionTypes = getAllActionTypes;
exports.isValidStatusEffect = isValidStatusEffect;
exports.isValidEffectDuration = isValidEffectDuration;
exports.isValidEffectTarget = isValidEffectTarget;
exports.createEffect = createEffect;
exports.createSelection = createSelection;
// ============================================================================
// ACTION TYPES
// ============================================================================
/**
 * Character action types - what characters can do
 */
let CharacterActionType;
(function (CharacterActionType) {
    // Information gathering
    CharacterActionType["LEARN_EVIL_PAIRS_COUNT"] = "learnEvilPairsCount";
    CharacterActionType["LEARN_EVIL_NEIGHBOR_COUNT"] = "learnEvilNeighborCount";
    CharacterActionType["LEARN_PLAYER_INFO"] = "learnPlayerInfo";
    CharacterActionType["LEARN_CHARACTER_TYPE"] = "learnCharacterType";
    CharacterActionType["LEARN_ROLE_IDENTITY"] = "learnRoleIdentity";
    CharacterActionType["DETECT_OUTSIDER"] = "detectOutsider";
    CharacterActionType["DETECT_MINION"] = "detectMinion";
    CharacterActionType["DETECT_DEMON"] = "detectDemon";
    // Player targeting/selection
    CharacterActionType["CHOOSE_PLAYER"] = "choosePlayer";
    CharacterActionType["CHOOSE_PLAYERS"] = "choosePlayers";
    CharacterActionType["CHOOSE_3_PLAYERS"] = "choose3Players";
    CharacterActionType["CHOOSE_MASTER"] = "chooseMaster";
    CharacterActionType["CHOOSE_CHARACTER_TYPE"] = "chooseCharacterType";
    CharacterActionType["CHOOSE_MINION_OR_DEMON"] = "chooseMinion-OrDemon";
    // Killing and protection
    CharacterActionType["KILL_PLAYER"] = "killPlayer";
    CharacterActionType["CHOOSE_PLAYER_KILL"] = "choosePlayerKill";
    CharacterActionType["KILL_CHOSEN_PLAYER_ONCE"] = "killChosenPlayerOnce";
    CharacterActionType["PROTECT_PLAYER"] = "protectPlayer";
    CharacterActionType["PROTECT_GOOD_NEIGHBORS_PASSIVE"] = "protectGoodNeighborsPassive";
    CharacterActionType["FIRST_DEATH_SURVIVE"] = "firstDeathSurvive";
    // Status effects
    CharacterActionType["POISON_PLAYER"] = "poisonPlayer";
    CharacterActionType["MADNESS_PLAYER"] = "madnessPlayer";
    CharacterActionType["DRUNK_PLAYER"] = "drunkPlayer";
    CharacterActionType["CHOOSE_CHARACTER_TO_BE_DRUNK"] = "chooseCharacterToBeDeunk";
    // Voting and nominations
    CharacterActionType["NOMINATE"] = "nominate";
    CharacterActionType["NOMINATE_AGAIN"] = "nominateAgain";
    CharacterActionType["VOTE_MANIPULATION"] = "voteManipulation";
    CharacterActionType["ENFORCE_VOTING_RESTRICTION"] = "enforceVotingRestriction";
    CharacterActionType["RESTRICT_OWN_VOTE"] = "restrictOwnVote";
    CharacterActionType["DEAD_REGAIN_VOTE"] = "deadRegainVote";
    // Information sharing
    CharacterActionType["SHARE_LEARNED_INFO"] = "shareLearnedInfo";
    CharacterActionType["GIVE_INCORRECT_INFO"] = "giveIncorrectInfo";
    CharacterActionType["SAY_PHRASE"] = "sayPhrase";
    // Special abilities
    CharacterActionType["GAIN_ABILITY"] = "gainAbility";
    CharacterActionType["BLOCK_DEMON"] = "blockDemon";
    CharacterActionType["DEMON_MAY_CHOOSE_NOT_TO_ATTACK"] = "demonMayChooseNotToAttack";
    CharacterActionType["STORYTELLER_GAINS_MINION_ABILITY"] = "storytellerGainsMinion-Ability";
    CharacterActionType["KILLED_MINION_KEEPS_ABILITY_POISON_NEIGHBOR"] = "killedMinionKeepsAbilityPoisonNeighbor";
    // Legion specific
    CharacterActionType["CHOOSE_PLAYER_TO_DIE"] = "choosePlayerToDie";
})(CharacterActionType || (exports.CharacterActionType = CharacterActionType = {}));
/**
 * Meta action types - script-level actions
 */
let MetaActionType;
(function (MetaActionType) {
    MetaActionType["SHOW_TEAM_TO_MINIONS"] = "showTeamToMinions";
    MetaActionType["SHOW_TEAM_AND_BLUFFS_TO_DEMON"] = "showTeamAndBluffsToDemon";
    MetaActionType["SETUP_MADNESS"] = "setupMadness";
    MetaActionType["DISTRIBUTE_ROLES"] = "distributeRoles";
    MetaActionType["APPLY_FIRST_NIGHT_INFO"] = "applyFirstNightInfo";
    MetaActionType["ASSIGN_RED_HERRING"] = "assignRedHerring";
    MetaActionType["RECEIVE_BLUFF_CHARACTERS"] = "receiveBluffCharacters";
    MetaActionType["COORDINATE_EVIL_TEAM"] = "coordinateEvilTeam";
    MetaActionType["MAINTAIN_BLUFF"] = "maintainBluff";
    MetaActionType["DEFLECT_ATTENTION"] = "deflectAttention";
    MetaActionType["VOTE_TO_SURVIVE"] = "voteToSurvive";
    MetaActionType["AVOID_EXECUTION"] = "avoidExecution";
    MetaActionType["SACRIFICE_MINIONS"] = "sacrificeMinions";
})(MetaActionType || (exports.MetaActionType = MetaActionType = {}));
// ============================================================================
// EFFECT TYPES AND STATUS CONDITIONS
// ============================================================================
/**
 * Status effects that can be applied to players
 */
let StatusEffect;
(function (StatusEffect) {
    // Basic status conditions
    StatusEffect["POISONED"] = "poisoned";
    StatusEffect["DRUNK"] = "drunk";
    StatusEffect["MAD"] = "mad";
    StatusEffect["PROTECTED"] = "protected";
    StatusEffect["DEAD"] = "dead";
    // Voting restrictions and modifications
    StatusEffect["MASTER"] = "master";
    StatusEffect["CAN_VOTE_ONLY_WITH_MASTER"] = "canVoteOnlyWithMaster";
    StatusEffect["VOTE_COUNTS_NEGATIVELY"] = "voteCountsNegatively";
    StatusEffect["CANNOT_VOTE"] = "cannotVote";
    StatusEffect["DEAD_VOTE_USED"] = "deadVoteUsed";
    // Character-specific statuses
    StatusEffect["SLAYER_USED"] = "slayerUsed";
    StatusEffect["VIRGIN_TRIGGERED"] = "virginTriggered";
    StatusEffect["BUTLER_MASTER_SET"] = "butlerMasterSet";
    StatusEffect["INNKEEPER_PROTECTION"] = "innkeeperProtection";
    StatusEffect["SOLDIER_PROTECTION"] = "soldierProtection";
    StatusEffect["TEA_LADY_PROTECTION"] = "teaLadyProtection";
    // Information tracking
    StatusEffect["LEARNED_INFO"] = "learnedInfo";
    StatusEffect["BLUFF_GIVEN"] = "bluffGiven";
    StatusEffect["FALSE_INFO_GIVEN"] = "falseInfoGiven";
    // Game state modifiers
    StatusEffect["NOMINATED_TODAY"] = "nominatedToday";
    StatusEffect["EXECUTED_TODAY"] = "executedToday";
    StatusEffect["ACTED_TONIGHT"] = "actedTonight";
    // Special conditions
    StatusEffect["STARPASS_CANDIDATE"] = "starpassCandidate";
    StatusEffect["DEMON_INFO_RECEIVED"] = "demonInfoReceived";
    StatusEffect["MINION_INFO_RECEIVED"] = "minionInfoReceived";
})(StatusEffect || (exports.StatusEffect = StatusEffect = {}));
/**
 * Duration types for effects
 */
let EffectDuration;
(function (EffectDuration) {
    EffectDuration["INSTANT"] = "instant";
    EffectDuration["TONIGHT"] = "tonight";
    EffectDuration["UNTIL_DUSK"] = "untilDusk";
    EffectDuration["ONE_DAY"] = "oneDay";
    EffectDuration["ONE_NIGHT"] = "oneNight";
    EffectDuration["PERMANENT"] = "permanent";
    EffectDuration["UNTIL_DEATH"] = "untilDeath";
    EffectDuration["UNTIL_ABILITY_USED"] = "untilAbilityUsed";
})(EffectDuration || (exports.EffectDuration = EffectDuration = {}));
/**
 * Effect target types
 */
let EffectTarget;
(function (EffectTarget) {
    EffectTarget["SELF"] = "self";
    EffectTarget["SELECTED"] = "selected";
    EffectTarget["ONE_OF_SELECTED"] = "oneOfSelected";
    EffectTarget["ALL_SELECTED"] = "allSelected";
    EffectTarget["ALL_PLAYERS"] = "allPlayers";
    EffectTarget["NEIGHBORS"] = "neighbors";
    EffectTarget["STORYTELLER"] = "storyteller";
})(EffectTarget || (exports.EffectTarget = EffectTarget = {}));
// ============================================================================
// SELECTION CRITERIA
// ============================================================================
/**
 * Player teams for selection restrictions
 */
let PlayerTeam;
(function (PlayerTeam) {
    PlayerTeam["TOWNSFOLK"] = "townsfolk";
    PlayerTeam["OUTSIDERS"] = "outsiders";
    PlayerTeam["MINIONS"] = "minions";
    PlayerTeam["DEMONS"] = "demons";
    PlayerTeam["TRAVELLER"] = "traveller";
    PlayerTeam["FABLED"] = "fabled";
})(PlayerTeam || (exports.PlayerTeam = PlayerTeam = {}));
/**
 * Selection modifiers
 */
let SelectionModifier;
(function (SelectionModifier) {
    SelectionModifier["ALLOW_SELF"] = "allowSelf";
    SelectionModifier["ALLOW_DEAD"] = "allowDead";
    SelectionModifier["REQUIRE_ALIVE"] = "requireAlive";
    SelectionModifier["ADJACENT_ONLY"] = "adjacentOnly";
    SelectionModifier["DIFFERENT_TEAM"] = "differentTeam";
    SelectionModifier["SAME_TEAM"] = "sameTeam";
    SelectionModifier["NOT_STORYTELLER"] = "notStoryteller";
})(SelectionModifier || (exports.SelectionModifier = SelectionModifier = {}));
/**
 * Common character tags for selection restrictions
 */
let CharacterTag;
(function (CharacterTag) {
    CharacterTag["ACTIVE"] = "active";
    CharacterTag["PASSIVE"] = "passive";
    CharacterTag["ONCE_PER_GAME"] = "once-per-game";
    CharacterTag["EACH_NIGHT"] = "each-night";
    CharacterTag["INFORMATION"] = "information";
    CharacterTag["KILL"] = "kill";
    CharacterTag["PROTECT"] = "protect";
    CharacterTag["MANIPULATE"] = "manipulate";
    CharacterTag["VOTE_MODIFIER"] = "vote-modifier";
    CharacterTag["SETUP_MODIFIER"] = "setup-modifier";
    CharacterTag["CHARACTER_CHANGE"] = "character-change";
    CharacterTag["STATUS_EFFECT"] = "status-effect";
})(CharacterTag || (exports.CharacterTag = CharacterTag = {}));
// ============================================================================
// GAME PHASE DEFINITIONS
// ============================================================================
/**
 * Game phases when actions can occur
 */
let ActionPhase;
(function (ActionPhase) {
    ActionPhase["FIRST_NIGHT"] = "firstNight";
    ActionPhase["OTHER_NIGHTS"] = "otherNights";
    ActionPhase["DAY"] = "day";
    ActionPhase["NOMINATIONS"] = "nominations";
    ActionPhase["VOTING"] = "voting";
    ActionPhase["EXECUTION"] = "execution";
})(ActionPhase || (exports.ActionPhase = ActionPhase = {}));
// ============================================================================
// TARGET SELECTION DEFINITIONS  
// ============================================================================
/**
 * Standard target selection configurations
 */
exports.TARGET_SELECTIONS = {
    SINGLE_PLAYER: {
        minTargets: 1,
        maxTargets: 1,
        allowSelf: false,
        requireAlive: true,
    },
    SINGLE_PLAYER_ALLOW_SELF: {
        minTargets: 1,
        maxTargets: 1,
        allowSelf: true,
        requireAlive: true,
    },
    SINGLE_PLAYER_ALLOW_DEAD: {
        minTargets: 1,
        maxTargets: 1,
        allowSelf: false,
        allowDead: true,
    },
    TWO_PLAYERS: {
        minTargets: 2,
        maxTargets: 2,
        allowSelf: false,
        requireAlive: true,
    },
    THREE_PLAYERS: {
        minTargets: 3,
        maxTargets: 3,
        allowSelf: false,
        requireAlive: true,
    },
    ADJACENT_NEIGHBORS: {
        minTargets: 2,
        maxTargets: 2,
        allowSelf: false,
        adjacentOnly: true,
        requireAlive: true,
    },
    ANY_PLAYER_INCLUDING_DEAD: {
        minTargets: 1,
        maxTargets: 1,
        allowSelf: true,
        allowDead: true,
    },
};
// ============================================================================
// COMMON EFFECT DEFINITIONS
// ============================================================================
/**
 * Standard effect configurations
 */
exports.COMMON_EFFECTS = {
    POISON_TONIGHT: {
        status: StatusEffect.POISONED,
        target: EffectTarget.SELECTED,
        duration: EffectDuration.TONIGHT,
    },
    POISON_PERMANENT: {
        status: StatusEffect.POISONED,
        target: EffectTarget.SELECTED,
        duration: EffectDuration.PERMANENT,
    },
    PROTECT_TONIGHT: {
        status: StatusEffect.PROTECTED,
        target: EffectTarget.SELECTED,
        duration: EffectDuration.TONIGHT,
    },
    KILL_INSTANTLY: {
        status: StatusEffect.DEAD,
        target: EffectTarget.SELECTED,
        duration: EffectDuration.INSTANT,
    },
    SET_AS_MASTER: {
        status: StatusEffect.MASTER,
        target: EffectTarget.SELECTED,
        duration: EffectDuration.ONE_DAY,
    },
    VOTING_RESTRICTION: {
        status: StatusEffect.CAN_VOTE_ONLY_WITH_MASTER,
        target: EffectTarget.SELF,
        duration: EffectDuration.ONE_DAY,
    },
    MARK_ABILITY_USED: {
        status: StatusEffect.SLAYER_USED,
        target: EffectTarget.SELF,
        duration: EffectDuration.PERMANENT,
    },
};
// ============================================================================
// INFORMATION PATTERNS
// ============================================================================
/**
 * Common information delivery patterns
 */
exports.INFO_PATTERNS = {
    COUNT_MESSAGE: "You see [COUNT] {description}",
    PLAYER_IDENTITY: "You learn that [PLAYER] is the {role}",
    YES_NO_ANSWER: "{question}: [YES/NO]",
    PLAYER_LIST: "These players are {description}: [PLAYERS]",
    CUSTOM_TEMPLATE: "[CUSTOM_MESSAGE]",
};
// ============================================================================
// VALIDATION RULES
// ============================================================================
/**
 * Common validation patterns for actions
 */
exports.VALIDATION_RULES = {
    ONCE_PER_GAME: {
        maxUses: 1,
        scope: 'game',
    },
    ONCE_PER_NIGHT: {
        maxUses: 1,
        scope: 'night',
    },
    ONCE_PER_DAY: {
        maxUses: 1,
        scope: 'day',
    },
    UNLIMITED: {
        maxUses: -1,
        scope: 'none',
    },
};
// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================
/**
 * Check if an action type is a character action
 */
function isCharacterAction(actionType) {
    return Object.values(CharacterActionType).includes(actionType);
}
/**
 * Check if an action type is a meta action
 */
function isMetaAction(actionType) {
    return Object.values(MetaActionType).includes(actionType);
}
/**
 * Get all action types (both character and meta)
 */
function getAllActionTypes() {
    return [...Object.values(CharacterActionType), ...Object.values(MetaActionType)];
}
/**
 * Validate that a status effect exists
 */
function isValidStatusEffect(status) {
    return Object.values(StatusEffect).includes(status);
}
/**
 * Validate that an effect duration exists
 */
function isValidEffectDuration(duration) {
    return Object.values(EffectDuration).includes(duration);
}
/**
 * Validate that an effect target exists
 */
function isValidEffectTarget(target) {
    return Object.values(EffectTarget).includes(target);
}
/**
 * Create a standardized effect object
 */
function createEffect(status, target, duration, value) {
    return {
        status,
        target,
        duration,
        ...(value !== undefined && { value }),
    };
}
/**
 * Create a standardized selection object
 */
function createSelection(minTargets, maxTargets, modifiers = {}) {
    return {
        minTargets,
        maxTargets,
        ...modifiers,
    };
}
//# sourceMappingURL=game-definitions.js.map